#!/bin/bash

PCI_ID="0000:00:1f.6"
MARKER_FILE="/tmp/reset_e1000e_marker"
LOGGER_TAG="e1000e-watchdog"

find_interface() {
  local pci_id="$1"
  for i in {1..5}; do
    iface=$(ls -1 /sys/bus/pci/devices/$pci_id/net/ 2>/dev/null | head -n1)
    if [ -n "$iface" ]; then
      echo "$iface"
      return 0
    fi
    sleep 1
  done
  return 1
}

interface_operstate() {
  local iface="$1"
  cat /sys/class/net/$iface/operstate 2>/dev/null
}

interface_rx_traffic_dead() {
  local iface="$1"
  local rx1 rx2
  rx1=$(cat /sys/class/net/$iface/statistics/rx_packets 2>/dev/null)
  sleep 1
  rx2=$(cat /sys/class/net/$iface/statistics/rx_packets 2>/dev/null)
  [ "$rx1" = "$rx2" ]
}

# Function to get gateway for the interface
gateway_for_interface() {
  local iface="$1"
  ip route show dev "$iface" 2>/dev/null | awk '/default/ {print $3}' | head -n1
}

# Function to check gateway reachability for the interface
check_gateway_reachability() {
  local iface="$1"
  local gw
  gw=$(ip route show dev "$iface" 2>/dev/null | awk '/default/ {print $3}' | head -n1)
  if [ -z "$gw" ]; then
    logger -t "$LOGGER_TAG" -s "No gateway found for $iface"
    return 1
  fi
  local i
  for i in {1..4}; do
    if ping -c 1 -W 1 -I "$iface" "$gw" >/dev/null 2>&1; then
      logger -t "$LOGGER_TAG" -s "Ping to gateway $gw via $iface successful"
      return 0
    fi
  done
  logger -t "$LOGGER_TAG" -s "Ping to gateway $gw via $iface failed after 4 attempts"
  return 1
}

journalctl -f -o cat | while read -r line; do
  if echo "$line" | grep -q "Detected Hardware Unit Hang"; then

    INTERFACE=$(find_interface "$PCI_ID")
    if [ -z "$INTERFACE" ]; then
      logger -t "$LOGGER_TAG" -s "No interface found for PCI ID $PCI_ID"
      continue
    fi

    # Check gateway reachability before any actions
    if check_gateway_reachability "$INTERFACE"; then
      logger -t "$LOGGER_TAG" -s "Gateway reachable before any actions, skipping reset actions"
      continue
    fi

    # Restart interface
    ip link set "$INTERFACE" down
    sleep 2
    ip link set "$INTERFACE" up
    sleep 2
    if command -v ifreload >/dev/null; then
      ifreload -i "$INTERFACE"
    fi

    # Check gateway reachability after interface restart
    if check_gateway_reachability "$INTERFACE"; then
      logger -t "$LOGGER_TAG" -s "Gateway reachable after interface restart, skipping PCI reset"
      continue
    fi

    # Proceed with PCI reset as last resort
    logger -t "$LOGGER_TAG" -s "Proceeding with PCI reset on $INTERFACE"
    ip link set "$INTERFACE" down
    echo 1 > "/sys/bus/pci/devices/$PCI_ID/remove"
    sleep 2
    echo 1 > "/sys/bus/pci/rescan"
    sleep 3

    INTERFACE=$(find_interface "$PCI_ID")
    if [ -z "$INTERFACE" ]; then
      logger -t "$LOGGER_TAG" -s "After PCI rescan, interface not found â€” aborting"
      continue
    fi

    ip link set "$INTERFACE" up
    sleep 2
    if command -v ifreload >/dev/null; then
      ifreload -i "$INTERFACE"
    fi

    # Final check after PCI reset
    if check_gateway_reachability "$INTERFACE"; then
      logger -t "$LOGGER_TAG" -s "Gateway reachable after PCI reset"
    else
      logger -t "$LOGGER_TAG" -s "WARNING: Gateway still unreachable after PCI reset, rebooting system"
      reboot
    fi
  fi
done
